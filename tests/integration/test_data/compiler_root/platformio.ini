[platformio]
default_envs = wasm-quick
build_cache_dir = /js/pio_cache

; ─────────────────────────────────────────────
; Shared Base Environment for WASM builds
; ─────────────────────────────────────────────
[env:wasm-base]
platform = native
;lib_compat_mode = off
extra_scripts = post:wasm_compiler_flags.py

custom_wasm_export_name = fastled
; This keeps structure consistent for all three builds
build_flags =
    -DFASTLED_ENGINE_EVENTS_MAX_LISTENERS=50
    -DFASTLED_FORCE_NAMESPACE=1
    -DFASTLED_USE_PROGMEM=0
    -DUSE_OFFSET_CONVERTER=0
    -DSKETCH_COMPILE=1
    -DFASTLED_WASM_USE_CCALL
    -DGL_ENABLE_GET_PROC_ADDRESS=0
    -std=gnu++17
    -fpermissive
    -fno-rtti
    -fno-exceptions
    -Wno-constant-logical-operand
    -Wnon-c-typedef-for-linkage
    -Werror=bad-function-cast
    -Werror=cast-function-type
    -emit-llvm
    ; Threading disabled flags
    -fno-threadsafe-statics
    -pthread
    -D_REENTRANT=1
    ; Emscripten type name handling
    -DEMSCRIPTEN_HAS_UNBOUND_TYPE_NAMES=0
    -I.
    -Isrc
    !echo "-I${ENV_FASTLED_SOURCE_PATH:-${ENV_FASTLED_ROOT:-/git/fastled}/src}"
    !echo "-I${ENV_FASTLED_SOURCE_PATH:-${ENV_FASTLED_ROOT:-/git/fastled}/src}/platforms/wasm/compiler"


; These will be extended per environment below
link_flags =
    !python -c "import os; print(f'-fuse-ld={os.environ.get(\"LINKER\", \"lld\")}')"
    -sWASM=1
    -sALLOW_MEMORY_GROWTH=1
    -sINITIAL_MEMORY=134217728
    -sAUTO_NATIVE_LIBRARIES=0
    -sEXPORTED_RUNTIME_METHODS=['ccall','cwrap','stringToUTF8','lengthBytesUTF8','HEAPU8','getValue']
    -sEXPORTED_FUNCTIONS=['_malloc','_free','_extern_setup','_extern_loop','_fastled_declare_files','_getStripPixelData']
    --no-entry
    --emit-symbol-map
    -sMODULARIZE=1
    -sEXPORT_NAME=fastled
    -Wl,--whole-archive
    --source-map-base=http://localhost:8000/

; ─────────────────────────────────────────────
; wasm-debug: Full debug info and sanitizers
; ─────────────────────────────────────────────
[env:wasm-debug]
extends = wasm-base
platform = native
;lib_compat_mode = off
extra_scripts = post:wasm_compiler_flags.py

custom_wasm_export_name = fastled
; This keeps structure consistent for all three builds
build_flags =
    ${env:wasm-base.build_flags}
    -g3
    -gsource-map
    -fsanitize=address
    -fsanitize=undefined
    -fno-inline
    -O0
    !python -c "import os; lib_suffix = '' if os.environ.get('NO_THIN_LTO', '0') == '1' else '-thin'; print(f'-L{os.environ.get(\"ENV_BUILD_ROOT\", \"/build\")}/debug -lfastled{lib_suffix}')"
    -ffile-prefix-map=/=dwarfsource/
link_flags =
    ${env:wasm-base.link_flags}
    -fsanitize=address
    -fsanitize=undefined
    -sSEPARATE_DWARF_URL=fastled.wasm.dwarf
    -sSTACK_OVERFLOW_CHECK=2
    -sASSERTIONS=1

; ─────────────────────────────────────────────
; wasm-quick: Light optimization (O1)
; ─────────────────────────────────────────────
[env:wasm-quick]
extends = wasm-base
platform = native
extra_scripts = post:wasm_compiler_flags.py
build_dir = build/wasm
custom_wasm_export_name = fastled
build_flags =
    ${env:wasm-base.build_flags}
    -flto=thin
    -O1
    !echo "-L${ENV_BUILD_ROOT:-/build}/quick" -lfastled
link_flags =
    ${env:wasm-base.link_flags}
    -sASSERTIONS=0


; ─────────────────────────────────────────────
; wasm-release: Full optimization (O3)
; ─────────────────────────────────────────────
[env:wasm-release]
extends = wasm-base
platform = native
build_dir = build/wasm
custom_wasm_export_name = fastled
build_flags =
    ${env:wasm-base.build_flags}
    -Oz
    !echo "-L${ENV_BUILD_ROOT:-/build}/release" -lfastled
link_flags =
    ${env:wasm-base.link_flags}
    -sASSERTIONS=0